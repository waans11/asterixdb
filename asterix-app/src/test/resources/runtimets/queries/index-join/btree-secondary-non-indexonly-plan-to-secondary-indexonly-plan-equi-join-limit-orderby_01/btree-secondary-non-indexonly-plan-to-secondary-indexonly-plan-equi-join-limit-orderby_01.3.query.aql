/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Description    : Equi joins two datasets, Customers and Orders, based on the customer id.
 *                  Given the 'indexnl' hint we expect the join to be transformed
 *                  into an indexed nested-loop join using Orders' secondary index.
 *                  Inner branch will be transformed as an index-only plan.
 *                  Outer branch cannot be transformed as an index-only plan as an index can't cover
 *                  all search predicates even excluding the join condition.
 *                  We also have a LIMIT. Each partition in the secondary index of the inner branch should only
 *                  generate the number of tuples that are equivalent to the LIMIT number. We call this "parameterizing the LIMIT".
 *                  We can trust the result of the secondary index-search since it executes a tryLock on PK.
 *                  And the given order by attribute is consistent to the indexed attribute of the primary index-search in the outer branch.
 *                  In outer branch, result from a secondary index-search will sorted based on the PK of the outer branch.
 *                  Thus, "parameterizing the LIMIT" can be only applied to an order by with PK attribute of the outer branch.
 * Success        : Yes
 */


use dataverse test;

count(
for $o in dataset('Orders')
for $c in dataset('Customers')
where $o.cid < 100000 and $o.total >= 0 and $o.cid /*+ indexnl */ = $c.cashBack
order by $o.oid
limit 2
return {"oid": $o.oid, "cid":$c.cid}
);