/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Description    : Equi joins two datasets, Customers and Orders, based on the customer id.
 *                  Given the 'indexnl' hint we expect the join to be transformed
 *                  into an indexed nested-loop join using Customers' primary index.
 *                  We also have a LIMIT. Each partition in the primary index of the inner branch
 *                  should only generate the number of tuples that are equivalent to the LIMIT number.
 *                  We call this "parameterizing the LIMIT".
 *                  There is an order-by and UNION_ALL operator can't enforce the original output order of the
 *                  first secondary index-search in the outer branch, "parameterizing LIMIT" can't be applied.
 * Success        : Yes
 */

drop dataverse test if exists;
create dataverse test;

use dataverse test;

create type AddressType as open {
  number: int64,
  street: string,
  city: string
}

create type CustomerType as closed {
  cid: int64,
  name: string,
  cashBack: int64,
  age: int64?,
  address: AddressType?,
  lastorder: {
    oid: int64,
    total: float
  }
}

create type OrderType as open {
  oid: int64,
  cid: int64,
  orderstatus: string,
  orderpriority: string,
  clerk: string,
  total: float,
  items: [int64]
}

create dataset Customers(CustomerType) primary key cid;
create dataset Orders(OrderType) primary key oid;

create index CustomerID_idx on Orders(cid);

