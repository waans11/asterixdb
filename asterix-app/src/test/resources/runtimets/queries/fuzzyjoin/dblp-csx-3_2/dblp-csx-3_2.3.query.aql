/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
use dataverse fuzzyjoin;
set import-private-functions 'true';

//
// -- - Stage 3 - --
//
for $ridpair in 
    //
    // -- - Stage 2 - --
    //
    for $paperDBLP in dataset('DBLP')
    let $tokensDBLP :=
        for $tokenUnranked in counthashed-word-tokens($paperDBLP.title)
        for $tokenRanked at $i in
            //
            // -- - Stage 1 - --
            //
            for $paper in dataset('DBLP')
            let $id := $paper.id
            for $token in counthashed-word-tokens($paper.title)
            group by $tokenGroupped := $token with $id
            order by count($id), $tokenGroupped
            return $tokenGroupped
        where $tokenUnranked = $tokenRanked
        order by $i
        return $i
    for $prefixTokenDBLP in subset-collection(
                                $tokensDBLP,
                                0,
                                prefix-len-jaccard(len($tokensDBLP), .5f))

    for $paperCSX in dataset('CSX')
    let $tokensCSX :=
        for $tokenUnranked in counthashed-word-tokens($paperCSX.title)
        for $tokenRanked at $i in
            //
            // -- - Stage 1 - --
            //
            for $paper in dataset('DBLP')
            let $id := $paper.id
            for $token in counthashed-word-tokens($paper.title)
            group by $tokenGroupped := $token with $id
            order by count($id), $tokenGroupped
            return $tokenGroupped
        where $tokenUnranked = $tokenRanked
        order by $i
        return $i
    for $prefixTokenCSX in subset-collection(
                                $tokensCSX,
                                0,
                                prefix-len-jaccard(len($tokensCSX), .5f))

    where $prefixTokenDBLP = $prefixTokenCSX

    let $sim := similarity-jaccard-prefix(
                    len(counthashed-word-tokens($paperDBLP.title)),
                    $tokensDBLP,
                    len(counthashed-word-tokens($paperCSX.title)),
                    $tokensCSX,
                    $prefixTokenDBLP,
                    .5f)
    where $sim >= .5f
    group by $idDBLP := $paperDBLP.id, $idCSX := $paperCSX.id, $sim := $sim with $sim
    return {'idDBLP': $idDBLP, 'idCSX': $idCSX, 'sim': $sim[0]}

for $paperDBLP in dataset('DBLP')
for $paperCSX in dataset('CSX')
where $ridpair.idDBLP = $paperDBLP.id and $ridpair.idCSX = $paperCSX.id
order by $paperDBLP.id, $paperCSX.id
return {'dblp': $paperDBLP, 'csx': $paperCSX, 'sim': $ridpair.sim}
